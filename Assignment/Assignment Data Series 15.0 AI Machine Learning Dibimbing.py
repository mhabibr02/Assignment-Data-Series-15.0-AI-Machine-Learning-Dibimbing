# -*- coding: utf-8 -*-
"""Data Series 15.0 AI Machine Learning Dibimbing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MjECVAWzWcOssSx9ZuGCMu4r585btyou

# IMPORT LIBRARY AND LOAD DATASET

## IMPORT LIBRARY
"""

# import libraries and resources
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from google.colab import sheets
from google.colab import drive
drive.mount('/content/drive')

"""## LOAD DATASET"""

# read the dataset using pandas
data = pd.read_csv('/content/drive/My Drive/Course/Datasets/student-scores.csv')
data.head()

"""# EXPLORATORY DATA ANALYSIS

## GENERAL INFO DATASET
"""

# general information about the dataset
data.info()
data.describe()

# this displays the top 100 rows of the data
data.head(100)

# convert data to spreadsheets
sheet = sheets.InteractiveSheet(df=data)

"""## DISTRIBUTION VALUES

### MATH VALUES
"""

# check the distribution of math values
sns.histplot(data['math_score'], kde=True)
plt.title('Distribution of Math Values')
plt.show()

"""### HISTORY VALUES"""

# check the distribution of history values
sns.histplot(data['history_score'], kde=True)
plt.title('Distribution of History Values')
plt.show()

"""### PHYSICS VALUES"""

# check the distribution of physics values
sns.histplot(data['physics_score'], kde=True)
plt.title('Distribution of Physics Values')
plt.show()

"""### CHEMISTRY VALUES"""

# check the distribution of chemistry values
sns.histplot(data['chemistry_score'], kde=True)
plt.title('Distribution of Chemistry Values')
plt.show()

"""### BIOLOGY VALUES"""

# check the distribution of biology values
sns.histplot(data['biology_score'], kde=True)
plt.title('Distribution of Biology Values')
plt.show()

"""### ENGLISH VALUES"""

# check the distribution of english values
sns.histplot(data['english_score'], kde=True)
plt.title('Distribution of English Values')
plt.show()

"""### GEOGRAPHY VALUES"""

# check the distribution of geography values
sns.histplot(data['geography_score'], kde=True)
plt.title('Distribution of Geography Values')
plt.show()

"""## RELATIONSHIP BETWEEN FEATURES"""

# check the relationship between features
sns.pairplot(data)
plt.show()

"""# FEATURE ENGINEERING

## DUPLICATED DATA
"""

# check duplicated data
print("Number of Duplicate Data:", data.duplicated().sum())
data = data.drop_duplicates()

"""## MISSING VALUE HANDLING"""

# check missing value handling
print("Check Missing Values:")
print(data.isnull().sum())

"""## OUTLIER ANALYSIS

### BOXPLOT MATH
"""

# visualisasi boxplot math score
sns.boxplot(data['math_score'])
plt.title('Boxplot of Math Score')
plt.show()

"""### BLOXPLOT HISTORY"""

# visualisasi boxplot history score
sns.boxplot(data['history_score'])
plt.title('Boxplot of History Score')
plt.show()

"""### BLOXPLOT PHYSICS"""

# visualisasi boxplot physics score
sns.boxplot(data['physics_score'])
plt.title('Boxplot of Physics Score')
plt.show()

"""### BLOXPLOT CHEMISTRY"""

# visualisasi boxplot chemistry score
sns.boxplot(data['chemistry_score'])
plt.title('Boxplot of Chemistry Score')
plt.show()

"""### BLOXPLOT BIOLOGY"""

# visualisasi boxplot biology score
sns.boxplot(data['biology_score'])
plt.title('Boxplot of Biology Score')
plt.show()

"""### BLOXPLOT ENGLISH"""

# visualisasi boxplot english score
sns.boxplot(data['english_score'])
plt.title('Boxplot of English Score')
plt.show()

"""### BLOXPLOT GEOGRAPHY"""

# visualisasi boxplot geography score
sns.boxplot(data['geography_score'])
plt.title('Boxplot of Geography Score')
plt.show()

"""# MACHINE LEARNING MODELLING

## SPLIT DATA

### MATH
"""

# assume the 'weekly_self_study_hours' column as a feature and 'math_score' as a target
X = data[['weekly_self_study_hours']]
Ymath = data['math_score']

# split data into training and testing
X_train, X_test, Ymath_train, Ymath_test = train_test_split(X, Ymath, test_size=0.2, random_state=42)

"""### HISTORY"""

# assume the 'weekly_self_study_hours' column as a feature and 'history_score' as a target
X = data[['weekly_self_study_hours']]
Yhistory = data['history_score']

# split data into training and testing
X_train, X_test, Yhistory_train, Yhistory_test = train_test_split(X, Yhistory, test_size=0.2, random_state=42)

"""### PHYSICS"""

# assume the 'weekly_self_study_hours' column as a feature and 'physics_score' as a target
X = data[['weekly_self_study_hours']]
Yphysics = data['physics_score']

# split data into training and testing
X_train, X_test, Yphysics_train, Yphysics_test = train_test_split(X, Yphysics, test_size=0.2, random_state=42)

"""### CHEMISTRY"""

# assume the 'weekly_self_study_hours' column as a feature and 'chemistry_score' as a target
X = data[['weekly_self_study_hours']]
Ychemistry = data['chemistry_score']

# split data into training and testing
X_train, X_test, Ychemistry_train, Ychemistry_test = train_test_split(X, Ychemistry, test_size=0.2, random_state=42)

"""### BIOLOGY"""

# assume the 'weekly_self_study_hours' column as a feature and 'biology_score' as a target
X = data[['weekly_self_study_hours']]
Ybiology = data['biology_score']

# split data into training and testing
X_train, X_test, Ybiology_train, Ybiology_test = train_test_split(X, Ybiology, test_size=0.2, random_state=42)

"""### ENGLISH"""

# assume the 'weekly_self_study_hours' column as a feature and 'english_score' as a target
X = data[['weekly_self_study_hours']]
Yenglish = data['english_score']

# split data into training and testing
X_train, X_test, Yenglish_train, Yenglish_test = train_test_split(X, Yenglish, test_size=0.2, random_state=42)

"""### GEOGRAPHY"""

# assume the 'weekly_self_study_hours' column as a feature and 'geography_score' as a target
X = data[['weekly_self_study_hours']]
Ygeography = data['geography_score']

# split data into training and testing
X_train, X_test, Ygeography_train, Ygeography_test = train_test_split(X, Ygeography, test_size=0.2, random_state=42)

"""## MODEL TRAINING

### MATH
"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Ymath_train)
Ymath_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Ymath_train)
Ymath_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Ymath_train)
Ymath_pred_rf = rf.predict(X_test)

"""### HISTORY"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Yhistory_train)
Yhistory_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Yhistory_train)
Yhistory_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Yhistory_train)
Yhistory_pred_rf = rf.predict(X_test)

"""### PHYSICS"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Yphysics_train)
Yphysics_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Yphysics_train)
Yphysics_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Yphysics_train)
Yphysics_pred_rf = rf.predict(X_test)

"""### CHEMISTRY"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Ychemistry_train)
Ychemistry_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Ychemistry_train)
Ychemistry_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Ychemistry_train)
Ychemistry_pred_rf = rf.predict(X_test)

"""### BIOLOGY"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Ybiology_train)
Ybiology_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Ybiology_train)
Ybiology_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Ybiology_train)
Ybiology_pred_rf = rf.predict(X_test)

"""### ENGLISH"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Yenglish_train)
Yenglish_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Yenglish_train)
Yenglish_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Yenglish_train)
Yenglish_pred_rf = rf.predict(X_test)

"""### GEOGRAPHY"""

# linear regression
lr = LinearRegression()
lr.fit(X_train, Ygeography_train)
Ygeography_pred_lr = lr.predict(X_test)

# decision tree regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, Ygeography_train)
Ygeography_pred_dt = dt.predict(X_test)

# random forest regressor
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, Ygeography_train)
Ygeography_pred_rf = rf.predict(X_test)

"""# EVALUATION MODEL

## MATH
"""

# functions for model evaluation
def evaluate_model(Ymath_test, Ymath_pred, model_name):
    mse = mean_squared_error(Ymath_test, Ymath_pred)
    r2 = r2_score(Ymath_test, Ymath_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Ymath_test, Ymath_pred_lr, "Linear Regression")
evaluate_model(Ymath_test, Ymath_pred_dt, "Decision Tree Regressor")
evaluate_model(Ymath_test, Ymath_pred_rf, "Random Forest Regressor")

"""## HISTORY"""

# functions for model evaluation
def evaluate_model(Yhistory_test, Yhistory_pred, model_name):
    mse = mean_squared_error(Yhistory_test, Yhistory_pred)
    r2 = r2_score(Yhistory_test, Yhistory_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Yhistory_test, Yhistory_pred_lr, "Linear Regression")
evaluate_model(Yhistory_test, Yhistory_pred_dt, "Decision Tree Regressor")
evaluate_model(Yhistory_test, Yhistory_pred_rf, "Random Forest Regressor")

"""## PHYSICS"""

# functions for model evaluation
def evaluate_model(Yphysics_test, Yphysics_pred, model_name):
    mse = mean_squared_error(Yphysics_test, Yphysics_pred)
    r2 = r2_score(Yphysics_test, Yphysics_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Yphysics_test, Yphysics_pred_lr, "Linear Regression")
evaluate_model(Yphysics_test, Yphysics_pred_dt, "Decision Tree Regressor")
evaluate_model(Yphysics_test, Yphysics_pred_rf, "Random Forest Regressor")

"""## CHEMISTRY"""

# functions for model evaluation
def evaluate_model(Ychemistry_test, Ychemistry_pred, model_name):
    mse = mean_squared_error(Ychemistry_test, Ychemistry_pred)
    r2 = r2_score(Ychemistry_test, Ychemistry_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Ychemistry_test, Ychemistry_pred_lr, "Linear Regression")
evaluate_model(Ychemistry_test, Ychemistry_pred_dt, "Decision Tree Regressor")
evaluate_model(Ychemistry_test, Ychemistry_pred_rf, "Random Forest Regressor")

"""## BIOLOGY"""

# functions for model evaluation
def evaluate_model(Ybiology_test, Ybiology_pred, model_name):
    mse = mean_squared_error(Ybiology_test, Ybiology_pred)
    r2 = r2_score(Ybiology_test, Ybiology_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Ybiology_test, Ybiology_pred_lr, "Linear Regression")
evaluate_model(Ybiology_test, Ybiology_pred_dt, "Decision Tree Regressor")
evaluate_model(Ybiology_test, Ybiology_pred_rf, "Random Forest Regressor")

"""## ENGLISH"""

# functions for model evaluation
def evaluate_model(Yenglish_test, Yenglish_pred, model_name):
    mse = mean_squared_error(Yenglish_test, Yenglish_pred)
    r2 = r2_score(Yenglish_test, Yenglish_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Yenglish_test, Yenglish_pred_lr, "Linear Regression")
evaluate_model(Yenglish_test, Yenglish_pred_dt, "Decision Tree Regressor")
evaluate_model(Yenglish_test, Yenglish_pred_rf, "Random Forest Regressor")

"""## GEOGRAPHY"""

# functions for model evaluation
def evaluate_model(Ygeography_test, Ygeography_pred, model_name):
    mse = mean_squared_error(Ygeography_test, Ygeography_pred)
    r2 = r2_score(Ygeography_test, Ygeography_pred)
    print(f"{model_name} - MSE: {mse:.2f}, R2 Score: {r2:.2f}")

evaluate_model(Ygeography_test, Ygeography_pred_lr, "Linear Regression")
evaluate_model(Ygeography_test, Ygeography_pred_dt, "Decision Tree Regressor")
evaluate_model(Ygeography_test, Ygeography_pred_rf, "Random Forest Regressor")

"""# CONCLUSION

Math : Linear Regression - MSE: 139.04, R2 Score: 0.16

History : Random Forest Regressor - MSE: 160.86, R2 Score: 0.12

Physics : Random Forest Regressor - MSE: 151.04, R2 Score: 0.07

Chemistry : Random Forest Regressor - MSE: 159.07, R2 Score: 0.05

Biology : Random Forest Regressor - MSE: 193.42, R2 Score: 0.08

English : Linear Regression - MSE: 140.64, R2 Score: 0.07

Geography : Random Forest Regressor - MSE: 135.36, R2 Score: 0.06
"""